#include<stdio.h>
#include<stdlib.h>
#include<time.h>

typedef int ElemType;

typedef struct LNode
{
	ElemType data;
	struct LNode *next;
}*LinkList;

int InitList( LinkList *L)
{
	*L = (LinkList)malloc(sizeof(LNode));
	(*L)->next = NULL;
	return 0;
}

int ListLength(LinkList L)
{
	LinkList p = L->next;
	int i = 0;
	while (p != NULL) {
		i++;
		p = p->next;	
	}
	return i;
}
int visit(ElemType c)
{
	printf("->%d", c);
	return 0;
}
int ListTraverse(LinkList L)
{
	LinkList p;
	p = L->next;   //指向第一个节点;
	while (p != NULL){
		visit(p->data);
		p=p->next;
	}
	printf("\n");
	return 0;
}
int GetElem(LinkList L,int i, ElemType *e)
{
	LinkList p;
	p = L->next;   //指向第一个节点;
	int j = 1;
	while (j<i&&p!=NULL) {
		p = p->next;
		++j;
	}
	if (p == NULL){
		printf("没有该元素");
		return 1;
	}
	*e = p->data;
		printf("第%d个元素的值为：%d\n", i, *e);
	return 0;
}
int LocateElem(LinkList L, ElemType e)
{
	LinkList p;
	p = L->next;
	int i = 0;
	while (p = NULL) {		
		i++;
		if (p->data == e);
		p = p->next;
	}
	return 0;
}
int CreateListHead(LinkList *L, int n)
{
	LinkList p;
	srand(time(0));
	*L = (LinkList)malloc(sizeof(LinkList));
	(*L)->next = NULL;
	for (int i = 0;i < n;i++) {
		p = (LinkList)malloc(sizeof(LinkList));
		p->data = rand() % 100 + 1;
		p->next=(*L)->next;
		(*L)->next = p;
	}
	return 0;
}

int ListInsert(LinkList *L, int i, ElemType e)
{
	LinkList p,s;
	p = *L;
	int j = 1;
	while (p&&j<i) {
		p = p->next;
		++j;
	}
	if (p == NULL){
		return 0;
	}
	s = (LinkList)malloc(sizeof(LNode));
	s->data = e;
	s->next = p->next;
	p->next = s;
	return 0;
}
int ListDelete(LinkList *L, int i, ElemType *e)
{
	LinkList p, q;
	int j = 1;
	p = *L;
	while (p&&j < i){
		p = p->next;
		++j;
	}
	if (p == NULL)
	{
		return 0;
	}
	q = p->next;
	p->next=q->next;
	*e = q->data;
	free(q);
	return 0;
}
int main()
{
	LinkList L;
	int i, j, k, pos, value;
	int opp = 0;
	ElemType e;
	i = InitList(&L);
	printf("链表L初始化完毕，ListLength(L)=%d\n", ListLength(L));
	printf("\n1.整表创建（头插法） \n2.遍历操作 \n3.插入操作 \n4.删除操作 \n5.获取结点数据 \n6.查找某个数是否在链表中 \n0.退出 \n请选择你的操作：\n");
	while (opp != '0') {
		scanf("%c", &opp);
		switch (opp) {
		case '1':
			CreateListHead(&L, 20);
			printf("整体创建L的元素(头插法)：\n");
			ListTraverse(L);
			printf("\n");
			break;
		case '2':
			ListTraverse(L);
			printf("\n");
			break;
		case '3':
			printf("要在第几个位置插入元素？");
			scanf("%d", &pos);
			printf("插入的元素值是多少？");
			scanf("%d", &value);
			ListInsert(&L, pos, value);
			ListTraverse(L);
			printf("\n");
			break;
		case '4':
			printf("要删除第几个元素？");
			scanf("%d", &pos);
			ListDelete(&L, pos, &e);
			printf("删除第%d个元素成功，现在链表为：\n", pos);
			ListTraverse(L);
			printf("\n");
			break;
		case '5':
			printf("你需要获取第几个元素？");
			scanf("%d", &pos);
			GetElem(L, pos, &e);
			printf("\n");
			break;
		case '6':
			printf("输入你需要查找的数：");
			scanf("%d", &pos);
			k = LocateElem(L, pos);
			if (k)
				printf("第%d个元素的值为%d\n", k, pos);
			else
				printf("没有值为%d的元素\n", pos);
			printf("\n");
			break;
		case '0':
			exit(0);
		}
	}
}1
